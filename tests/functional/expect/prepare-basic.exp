#!/usr/bin/env -S expect -f
#
# This Expect script was generated by autoexpect on Sat Mar  1 10:46:07 2025
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

variable scriptPath [file normalize [info script]]
variable scriptDir [file dirname $scriptPath]

set timeout -1
spawn $scriptDir/../../../bin/conventional-commits --no-ansi prepare --config $scriptDir/../../configs/default.json
match_max 100000
expect -exact "\r
Prepare Commit Message\r
======================\r
\r
 The following prompts will help you create a commit message that\r
 follows the Conventional Commits specification.\r
\r
 What is the type of change you're committing? (e.g., feat, fix, etc.) \[feat\]:\r
 > "
send -- "feat\r"
expect -exact "\r
\r
 What is the scope of this change (e.g., component or file name)?:\r
 > "
send -- "\r"
expect -exact "\r
\r
 Write a short description of the change:\r
 > "
send -- "this is a test\r"
expect -exact "this is a test\r
\r
 You may provide a longer description of the change (press Ctrl+D to continue):\r
 > "
send -- "\r"
expect -exact "\r
\r
 Are there any breaking changes? (yes/no) \[no\]:\r
 > "
send -- "\r"
expect -exact "\r
\r
 Does this change affect any open issues? (yes/no) \[no\]:\r
 > "
send -- "\r"
expect -exact "\r
\r
 Would you like to add any footers? (e.g., Signed-off-by, See-also) (yes/no) \[no\]:\r
 > "
send -- "\r"
expect eof
